id: 02_postgres_taxi
namespace: zoomcamp
description: |
  CSV Source: https://github.com/DataTalksClub/nyc-tlc-data/releases

inputs:
  - id: taxi
    type: SELECT
    displayName: Select taxi type
    values: [yellow, green]
    defaults: yellow

  - id: year
    type: SELECT
    displayName: Select year
    values: ["2019", "2020"]
    defaults: "2019"

  - id: month
    type: SELECT
    displayName: Select month
    values: ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]
    defaults: "01"

variables:
  file: "{{inputs.taxi}}_tripdata_{{inputs.year}}-{{inputs.month}}.csv"
  staging_table: "public.{{inputs.taxi}}_tripdata_staging"
  table: "public.{{inputs.taxi}}_tripdata"
  data: "{{outputs.extract.outputFiles[file]}}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      taxi: "{{inputs.taxi}}"

  - id: extract_data
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - |
        wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi}}/{{vars.file}}.gz | gunzip > {{vars.file}}

  - id: create_tables
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      CREATE TABLE IF NOT EXISTS {{vars.table}} (
          unique_row_id          TEXT PRIMARY KEY,
          filename               TEXT,
          VendorID               TEXT,
          pickup_datetime        TIMESTAMP,
          dropoff_datetime       TIMESTAMP,
          passenger_count        INTEGER,
          trip_distance          DOUBLE PRECISION,
          RatecodeID             TEXT,
          store_and_fwd_flag     TEXT,
          PULocationID           TEXT,
          DOLocationID           TEXT,
          payment_type           INTEGER,
          fare_amount            DOUBLE PRECISION,
          extra                  DOUBLE PRECISION,
          mta_tax                DOUBLE PRECISION,
          tip_amount             DOUBLE PRECISION,
          tolls_amount           DOUBLE PRECISION,
          improvement_surcharge  DOUBLE PRECISION,
          total_amount           DOUBLE PRECISION,
          congestion_surcharge   DOUBLE PRECISION
      );

      CREATE TABLE IF NOT EXISTS {{vars.staging_table}} AS SELECT * FROM {{vars.table}} WHERE 1=0;

  - id: truncate_staging_table
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      TRUNCATE TABLE {{vars.staging_table}};

  - id: copy_into_staging
    type: io.kestra.plugin.jdbc.postgresql.CopyIn
    format: CSV
    from: "{{vars.data}}"
    table: "{{vars.staging_table}}"
    header: true

  - id: update_staging_with_unique_id
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      UPDATE {{vars.staging_table}}
      SET 
        unique_row_id = md5(
          COALESCE(CAST(VendorID AS TEXT), '') ||
          COALESCE(CAST(pickup_datetime AS TEXT), '') || 
          COALESCE(CAST(dropoff_datetime AS TEXT), '') || 
          COALESCE(PULocationID, '') || 
          COALESCE(DOLocationID, '') || 
          COALESCE(CAST(fare_amount AS TEXT), '') || 
          COALESCE(CAST(trip_distance AS TEXT), '')      
        ),
        filename = '{{vars.file}}';

  - id: merge_into_main_table
    type: io.kestra.plugin.jdbc.postgresql.Queries
    sql: |
      MERGE INTO {{vars.table}} AS T
      USING {{vars.staging_table}} AS S
      ON T.unique_row_id = S.unique_row_id
      WHEN NOT MATCHED THEN
        INSERT (
          unique_row_id, filename, VendorID, pickup_datetime, dropoff_datetime,
          passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID,
          DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount,
          improvement_surcharge, total_amount, congestion_surcharge
        )
        VALUES (
          S.unique_row_id, S.filename, S.VendorID, S.pickup_datetime, S.dropoff_datetime,
          S.passenger_count, S.trip_distance, S.RatecodeID, S.store_and_fwd_flag, S.PULocationID,
          S.DOLocationID, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount,
          S.improvement_surcharge, S.total_amount, S.congestion_surcharge
        );

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: This will remove output files. If you'd like to explore Kestra outputs, disable it.

pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      url: jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp
      username: mnizhadali@kestra
      password: $#@!k3str@P@ssw0rd
